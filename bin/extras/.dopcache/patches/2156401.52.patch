diff --git a/core/core.services.yml b/core/core.services.yml
index b832314..926741f 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -237,7 +237,7 @@ services:
       - { name: event_subscriber }
   config.installer:
     class: Drupal\Core\Config\ConfigInstaller
-    arguments: ['@config.factory', '@config.storage', '@config.typed', '@config.manager', '@event_dispatcher']
+    arguments: ['@config.factory', '@config.storage', '@config.typed', '@config.manager', '@event_dispatcher', '%install_profile%']
     lazy: true
   config.storage:
     class: Drupal\Core\Config\CachedStorage
diff --git a/core/includes/bootstrap.inc b/core/includes/bootstrap.inc
index 2b12946..0edf964 100644
--- a/core/includes/bootstrap.inc
+++ b/core/includes/bootstrap.inc
@@ -842,31 +842,19 @@ function drupal_installation_attempted() {
  * When this function is called during Drupal's initial installation process,
  * the name of the profile that's about to be installed is stored in the global
  * installation state. At all other times, the "install_profile" setting will be
- * available in settings.php.
+ * available in settings.php, or declared as a Distribution.
  *
  * @return string|null $profile
  *   The name of the installation profile or NULL if no installation profile is
  *   currently active. This is the case for example during the first steps of
  *   the installer or during unit tests.
+ *
+ * @deprecated in Drupal 8.0.0, will be removed before Drupal 9.0.0.
+ *   Use \Drupal::installProfile() or the install_profile container parameter
+ *   instead.
  */
 function drupal_get_profile() {
-  global $install_state;
-
-  if (drupal_installation_attempted()) {
-    // If the profile has been selected return it.
-    if (isset($install_state['parameters']['profile'])) {
-      $profile = $install_state['parameters']['profile'];
-    }
-    else {
-      $profile = NULL;
-    }
-  }
-  else {
-    // Fall back to NULL, if there is no 'install_profile' setting.
-    $profile = Settings::get('install_profile');
-  }
-
-  return $profile;
+  return \Drupal::installProfile();
 }
 
 /**
diff --git a/core/includes/install.core.inc b/core/includes/install.core.inc
index 808520b..becc6e9 100644
--- a/core/includes/install.core.inc
+++ b/core/includes/install.core.inc
@@ -1211,12 +1211,9 @@ function _install_select_profile(&$install_state) {
       return $profile;
     }
   }
-  // Check for a distribution profile.
-  foreach ($install_state['profiles'] as $profile) {
-    $profile_info = install_profile_info($profile->getName());
-    if (!empty($profile_info['distribution'])) {
-      return $profile->getName();
-    }
+  // Check for a distribution.
+  if ($distribution = \Drupal::service('kernel')->getDistribution()) {
+    return $distribution;
   }
 
   // Get all visible (not hidden) profiles.
@@ -2296,13 +2293,23 @@ function install_display_requirements($install_state, $requirements) {
 }
 
 /**
- * Installation task; ensures install profile is written to settings.php.
+ * Installation task; writes profile to settings.php (absent a distribution).
  *
  * @param array $install_state
  *   An array of information about the current installation state.
  */
 function install_write_profile($install_state) {
-  if (Settings::get('install_profile') !== $install_state['parameters']['profile']) {
+  $settings_value = Settings::get('install_profile');
+  // We need to write to settings.php if the value in settings.php does not
+  // equal the selected profile.
+  $need_to_write = $settings_value !== $install_state['parameters']['profile'];
+  // However, if we're dealing with a distribution and the profile is not
+  // writable do not write the value to settings.php if the current value is not
+  // set.
+  if ($settings_value == '' && \Drupal::service('kernel')->getDistribution() && !is_writable(\Drupal::service('site.path') . '/settings.php')) {
+    $need_to_write = FALSE;
+  }
+  if ($need_to_write) {
     // Remember the profile which was used.
     $settings['settings']['install_profile'] = (object) array(
       'value' => $install_state['parameters']['profile'],
diff --git a/core/includes/install.inc b/core/includes/install.inc
index 31d472a..ae23d4e 100644
--- a/core/includes/install.inc
+++ b/core/includes/install.inc
@@ -315,7 +315,7 @@ function drupal_rewrite_settings($settings = array(), $settings_file = NULL) {
     }
 
     // Write the new settings file.
-    if (file_put_contents(DRUPAL_ROOT . '/' . $settings_file, $buffer) === FALSE) {
+    if (@file_put_contents(DRUPAL_ROOT . '/' . $settings_file, $buffer) === FALSE) {
       throw new Exception(t('Failed to modify %settings. Verify the file permissions.', array('%settings' => $settings_file)));
     }
     else {
diff --git a/core/lib/Drupal.php b/core/lib/Drupal.php
index 7621a48..8b15cef 100644
--- a/core/lib/Drupal.php
+++ b/core/lib/Drupal.php
@@ -181,6 +181,16 @@ public static function root() {
   }
 
   /**
+   * Gets the active install profile.
+   *
+   * @return string|null
+   *   The name of the any active install profile or distribution.
+   */
+  public static function installProfile() {
+    return static::getContainer()->getParameter('install_profile');
+  }
+
+  /**
    * Indicates if there is a currently active request object.
    *
    * @return bool
diff --git a/core/lib/Drupal/Core/Config/ConfigInstaller.php b/core/lib/Drupal/Core/Config/ConfigInstaller.php
index 8906eba..56a1a9d 100644
--- a/core/lib/Drupal/Core/Config/ConfigInstaller.php
+++ b/core/lib/Drupal/Core/Config/ConfigInstaller.php
@@ -11,7 +11,6 @@
 use Drupal\Core\Config\Entity\ConfigDependencyManager;
 use Drupal\Core\Config\Entity\ConfigEntityDependency;
 use Drupal\Core\Entity\EntityTypeInterface;
-use Drupal\Core\Site\Settings;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 
 class ConfigInstaller implements ConfigInstallerInterface {
@@ -66,6 +65,13 @@ class ConfigInstaller implements ConfigInstallerInterface {
   protected $isSyncing = FALSE;
 
   /**
+   * The name of the currently active installation profile.
+   *
+   * @var string
+   */
+  protected $installProfile;
+
+  /**
    * Constructs the configuration installer.
    *
    * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
@@ -78,13 +84,16 @@ class ConfigInstaller implements ConfigInstallerInterface {
    *   The configuration manager.
    * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $event_dispatcher
    *   The event dispatcher.
+   * @param string $install_profile
+   *   The name of the currently active installation profile.
    */
-  public function __construct(ConfigFactoryInterface $config_factory, StorageInterface $active_storage, TypedConfigManagerInterface $typed_config, ConfigManagerInterface $config_manager, EventDispatcherInterface $event_dispatcher) {
+  public function __construct(ConfigFactoryInterface $config_factory, StorageInterface $active_storage, TypedConfigManagerInterface $typed_config, ConfigManagerInterface $config_manager, EventDispatcherInterface $event_dispatcher, $install_profile) {
     $this->configFactory = $config_factory;
     $this->activeStorages[$active_storage->getCollectionName()] = $active_storage;
     $this->typedConfig = $typed_config;
     $this->configManager = $config_manager;
     $this->eventDispatcher = $event_dispatcher;
+    $this->installProfile = $install_profile;
   }
 
   /**
@@ -122,7 +131,7 @@ public function installDefaultConfig($type, $name) {
         $config_to_create = $this->getConfigToCreate($storage, $collection, $prefix, $profile_storage);
         // If we're installing a profile ensure configuration that is overriding
         // is excluded.
-        if ($name == $this->drupalGetProfile()) {
+        if ($name == $this->installProfile) {
           $existing_configuration = $this->getActiveStorages($collection)->listAll();
           $config_to_create = array_diff_key($config_to_create, array_flip($existing_configuration));
         }
@@ -157,16 +166,15 @@ public function installDefaultConfig($type, $name) {
    * {@inheritdoc}
    */
   public function installOptionalConfig(StorageInterface $storage = NULL, $dependency = []) {
-    $profile = $this->drupalGetProfile();
     if (!$storage) {
       // Search the install profile's optional configuration too.
       $storage = new ExtensionInstallStorage($this->getActiveStorages(StorageInterface::DEFAULT_COLLECTION), InstallStorage::CONFIG_OPTIONAL_DIRECTORY, StorageInterface::DEFAULT_COLLECTION, TRUE);
       // The extension install storage ensures that overrides are used.
       $profile_storage = NULL;
     }
-    elseif (isset($profile)) {
+    elseif (isset($this->installProfile)) {
       // Creates a profile storage to search for overrides.
-      $profile_install_path = $this->drupalGetPath('module', $profile) . '/' . InstallStorage::CONFIG_OPTIONAL_DIRECTORY;
+      $profile_install_path = $this->drupalGetPath('module', $this->installProfile) . '/' . InstallStorage::CONFIG_OPTIONAL_DIRECTORY;
       $profile_storage = new FileStorage($profile_install_path, StorageInterface::DEFAULT_COLLECTION);
     }
     else {
@@ -443,7 +451,7 @@ public function checkConfigurationToInstall($type, $name) {
 
     // Install profiles can not have config clashes. Configuration that
     // has the same name as a module's configuration will be used instead.
-    if ($name != $this->drupalGetProfile()) {
+    if ($name != $this->installProfile) {
       // Throw an exception if the module being installed contains configuration
       // that already exists. Additionally, can not continue installing more
       // modules because those may depend on the current module being installed.
@@ -557,11 +565,10 @@ protected function getEnabledExtensions() {
    *   used.
    */
   protected function getProfileStorage($installing_name = '') {
-    $profile = $this->drupalGetProfile();
-    if ($this->drupalInstallationAttempted() && $profile != $installing_name) {
+    if (isset($this->installProfile) && $this->drupalInstallationAttempted() && $this->installProfile != $installing_name) {
       // Profiles should not contain optional configuration so always use the
       // install directory.
-      $profile_install_path = $this->getDefaultConfigDirectory('module', $profile);
+      $profile_install_path = $this->getDefaultConfigDirectory('module', $this->installProfile);
       $profile_storage = new FileStorage($profile_install_path, StorageInterface::DEFAULT_COLLECTION);
     }
     else {
@@ -604,20 +611,6 @@ protected function drupalGetPath($type, $name) {
   }
 
   /**
-   * Gets the install profile from settings.
-   *
-   * @return string|null $profile
-   *   The name of the installation profile or NULL if no installation profile
-   *   is currently active. This is the case for example during the first steps
-   *   of the installer or during unit tests.
-   */
-  protected function drupalGetProfile() {
-    // Settings is safe to use because settings.php is written before any module
-    // is installed.
-    return Settings::get('install_profile');
-  }
-
-  /**
    * Wrapper for drupal_installation_attempted().
    *
    * @return bool
diff --git a/core/lib/Drupal/Core/Config/ExtensionInstallStorage.php b/core/lib/Drupal/Core/Config/ExtensionInstallStorage.php
index f31976b..606b833 100644
--- a/core/lib/Drupal/Core/Config/ExtensionInstallStorage.php
+++ b/core/lib/Drupal/Core/Config/ExtensionInstallStorage.php
@@ -7,7 +7,6 @@
 
 namespace Drupal\Core\Config;
 
-use Drupal\Core\Site\Settings;
 use Drupal\Core\Extension\ExtensionDiscovery;
 
 /**
@@ -83,15 +82,14 @@ protected function getAllFolders() {
       $this->folders = array();
       $this->folders += $this->getCoreNames();
 
-      $install_profile = Settings::get('install_profile');
-      $profile = drupal_get_profile();
+      $profile = \Drupal::installProfile();
       $extensions = $this->configStorage->read('core.extension');
       // @todo Remove this scan as part of https://www.drupal.org/node/2186491
       $listing = new ExtensionDiscovery(\Drupal::root());
       if (!empty($extensions['module'])) {
         $modules = $extensions['module'];
         // Remove the install profile as this is handled later.
-        unset($modules[$install_profile]);
+        unset($modules[$profile]);
         $profile_list = $listing->scan('profile');
         if ($profile && isset($profile_list[$profile])) {
           // Prime the drupal_get_filename() static cache with the profile info
diff --git a/core/lib/Drupal/Core/DrupalKernel.php b/core/lib/Drupal/Core/DrupalKernel.php
index fd27416..65a3a20 100644
--- a/core/lib/Drupal/Core/DrupalKernel.php
+++ b/core/lib/Drupal/Core/DrupalKernel.php
@@ -18,6 +18,7 @@
 use Drupal\Core\DependencyInjection\ServiceProviderInterface;
 use Drupal\Core\DependencyInjection\YamlFileLoader;
 use Drupal\Core\Extension\ExtensionDiscovery;
+use Drupal\Core\Extension\InfoParser;
 use Drupal\Core\File\MimeType\MimeTypeGuesser;
 use Drupal\Core\Http\TrustedHostsRequestFactory;
 use Drupal\Core\Language\Language;
@@ -1079,6 +1080,7 @@ protected function compileContainer() {
     $container = $this->getContainerBuilder();
     $container->set('kernel', $this);
     $container->setParameter('container.modules', $this->getModulesParameter());
+    $container->setParameter('install_profile', $this->getInstallProfile());
 
     // Get a list of namespaces and put it onto the container.
     $namespaces = $this->getModuleNamespacesPsr4($this->getModuleFileNames());
@@ -1448,4 +1450,36 @@ protected function addServiceFiles($service_yamls) {
     }
     return FALSE;
   }
+
+  /**
+   * Gets the active install profile.
+   *
+   * @return string|null
+   *   The name of the any active install profile or distribution.
+   */
+  protected function getInstallProfile() {
+    $install_profile = Settings::get('install_profile');
+    if (empty($install_profile)) {
+      $install_profile = $this->getDistribution();
+    }
+    return $install_profile;
+
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDistribution() {
+    $listing = new ExtensionDiscovery($this->root);
+    $listing->setProfileDirectories(array());
+    $info_parser = new InfoParser();
+    foreach ($listing->scan('profile') as $profile) {
+      $info = $info_parser->parse($profile->getPathname());
+      if (!empty($info['distribution'])) {
+        return $profile->getName();
+      }
+    }
+    return NULL;
+  }
+
 }
diff --git a/core/lib/Drupal/Core/DrupalKernelInterface.php b/core/lib/Drupal/Core/DrupalKernelInterface.php
index 892952a..287102b 100644
--- a/core/lib/Drupal/Core/DrupalKernelInterface.php
+++ b/core/lib/Drupal/Core/DrupalKernelInterface.php
@@ -134,4 +134,15 @@ public function preHandle(Request $request);
    */
   public function loadLegacyIncludes();
 
+  /**
+   * Get the name of any discovered profile that is a distribution.
+   *
+   * If multiple profiles are distributions, then the first discovered profile
+   * will be selected. See https://www.drupal.org/node/2210443.
+   *
+   * @return string|null
+   *   The machine name of any discovered distribution.
+   */
+  public function getDistribution();
+
 }
diff --git a/core/lib/Drupal/Core/Installer/InstallerKernel.php b/core/lib/Drupal/Core/Installer/InstallerKernel.php
index cd3977c..7cf6f72 100644
--- a/core/lib/Drupal/Core/Installer/InstallerKernel.php
+++ b/core/lib/Drupal/Core/Installer/InstallerKernel.php
@@ -45,4 +45,28 @@ protected function addServiceFiles($service_yamls) {
     // In the beginning there is no settings.php and no service YAMLs.
     return parent::addServiceFiles($service_yamls ?: []);
   }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getInstallProfile() {
+    global $install_state;
+
+    if ($install_state && empty($install_state['installation_finished'])) {
+      // If the profile has been selected return it.
+      if (isset($install_state['parameters']['profile'])) {
+        $profile = $install_state['parameters']['profile'];
+      }
+      else {
+        $profile = NULL;
+      }
+    }
+    else {
+      $profile = parent::getInstallProfile();
+    }
+
+    return $profile;
+  }
+
+
 }
diff --git a/core/modules/simpletest/src/InstallerTestBase.php b/core/modules/simpletest/src/InstallerTestBase.php
index c340c92..084c93e 100644
--- a/core/modules/simpletest/src/InstallerTestBase.php
+++ b/core/modules/simpletest/src/InstallerTestBase.php
@@ -121,7 +121,7 @@ protected function setUp() {
       ->set('app.root', DRUPAL_ROOT);
     \Drupal::setContainer($this->container);
 
-    $this->drupalGet($GLOBALS['base_url'] . '/core/install.php');
+    $this->drupalGet($this->getInstallationUrl());
 
     // Select language.
     $this->setUpLanguage();
@@ -215,4 +215,13 @@ protected function refreshVariables() {
     }
   }
 
+  /**
+   * Gets the URL at which the installation starts.
+   *
+   * @return string
+   */
+  protected function getInstallationUrl() {
+    return $GLOBALS['base_url'] . '/core/install.php';
+  }
+
 }
diff --git a/core/modules/system/src/Tests/Bootstrap/GetFilenameUnitTest.php b/core/modules/system/src/Tests/Bootstrap/GetFilenameUnitTest.php
index 27ca162..2d28302 100644
--- a/core/modules/system/src/Tests/Bootstrap/GetFilenameUnitTest.php
+++ b/core/modules/system/src/Tests/Bootstrap/GetFilenameUnitTest.php
@@ -8,6 +8,7 @@
 namespace Drupal\system\Tests\Bootstrap;
 
 use Drupal\simpletest\KernelTestBase;
+use Drupal\Core\DependencyInjection\ContainerBuilder;
 
 /**
  * Tests that drupal_get_filename() works correctly.
@@ -17,14 +18,18 @@
 class GetFilenameUnitTest extends KernelTestBase {
 
   /**
+   * {@inheritdoc}
+   */
+  public function containerBuild(ContainerBuilder $container) {
+    parent::containerBuild($container);
+    // Use the testing install profile.
+    $container->setParameter('install_profile', 'testing');
+  }
+
+  /**
    * Tests that drupal_get_filename() works when the file is not in database.
    */
   function testDrupalGetFilename() {
-    // drupal_get_profile() is using obtaining the profile from state if the
-    // install_state global is not set.
-    global $install_state;
-    $install_state['parameters']['profile'] = 'testing';
-
     // Rebuild system.module.files state data.
     // @todo Remove as part of https://www.drupal.org/node/2186491
     drupal_static_reset('system_rebuild_module_data');
diff --git a/core/modules/system/src/Tests/Installer/DistributionProfileExistingSettingsTest.php b/core/modules/system/src/Tests/Installer/DistributionProfileExistingSettingsTest.php
new file mode 100644
index 0000000..c999d6a
--- /dev/null
+++ b/core/modules/system/src/Tests/Installer/DistributionProfileExistingSettingsTest.php
@@ -0,0 +1,134 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\system\Tests\Installer\DistributionProfileExistingSettingsTest.
+ */
+
+namespace Drupal\system\Tests\Installer;
+
+use Drupal\Component\Serialization\Yaml;
+use Drupal\Core\Database\Database;
+use Drupal\Core\DrupalKernel;
+use Drupal\Core\Site\Settings;
+use Drupal\simpletest\InstallerTestBase;
+use Symfony\Component\HttpFoundation\Request;
+
+
+/**
+ * Tests distribution profile support with existing settings.
+ *
+ * @group Installer
+ */
+class DistributionProfileExistingSettingsTest extends InstallerTestBase {
+
+  /**
+   * The distribution profile info.
+   *
+   * @var array
+   */
+  protected $info;
+
+  protected function setUp() {
+    $this->info = array(
+      'type' => 'profile',
+      'core' => \Drupal::CORE_COMPATIBILITY,
+      'name' => 'Distribution profile',
+      'distribution' => array(
+        'name' => 'My Distribution',
+        'install' => array(
+          'theme' => 'bartik',
+        ),
+      ),
+    );
+    // File API functions are not available yet.
+    $path = $this->siteDirectory . '/profiles/mydistro';
+    mkdir($path, 0777, TRUE);
+    file_put_contents("$path/mydistro.info.yml", Yaml::encode($this->info));
+
+    // Pre-configure hash salt.
+    // Any string is valid, so simply use the class name of this test.
+    $this->settings['settings']['hash_salt'] = (object) array(
+      'value' => __CLASS__,
+      'required' => TRUE,
+    );
+
+    // Pre-configure database credentials.
+    $connection_info = Database::getConnectionInfo();
+    unset($connection_info['default']['pdo']);
+    unset($connection_info['default']['init_commands']);
+
+    $this->settings['databases']['default'] = (object) array(
+      'value' => $connection_info,
+      'required' => TRUE,
+    );
+
+    // Use the kernel to find the site path because the site.path service should
+    // not be available at this point in the install process.
+    $site_path = DrupalKernel::findSitePath(Request::createFromGlobals());
+    // Pre-configure config directories.
+    $this->settings['config_directories'] = array(
+      CONFIG_ACTIVE_DIRECTORY => (object) array(
+        'value' => $site_path . '/files/config_active',
+        'required' => TRUE,
+      ),
+      CONFIG_STAGING_DIRECTORY => (object) array(
+        'value' => $site_path . '/files/config_staging',
+        'required' => TRUE,
+      ),
+    );
+    mkdir($this->settings['config_directories'][CONFIG_ACTIVE_DIRECTORY]->value, 0777, TRUE);
+    mkdir($this->settings['config_directories'][CONFIG_STAGING_DIRECTORY]->value, 0777, TRUE);
+    parent::setUp();
+  }
+
+  /**
+   * Overrides InstallerTest::setUpLanguage().
+   */
+  protected function setUpLanguage() {
+    // Make settings file not writable.
+    $filename = $this->siteDirectory . '/settings.php';
+    // Make the settings file read-only.
+    // Not using File API; a potential error must trigger a PHP warning.
+    chmod($filename, 0444);
+
+    // Verify that the distribution name appears.
+    $this->assertRaw($this->info['distribution']['name']);
+    // Verify that the requested theme is used.
+    $this->assertRaw($this->info['distribution']['install']['theme']);
+    // Verify that the "Choose profile" step does not appear.
+    $this->assertNoText('profile');
+
+    parent::setUpLanguage();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUpProfile() {
+    // This step is skipped, because there is a distribution profile.
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUpSettings() {
+    // This step should not appear, since settings.php is fully configured
+    // already.
+  }
+
+  /**
+   * Confirms that the installation succeeded.
+   */
+  public function testInstalled() {
+    $this->assertUrl('user/1');
+    $this->assertResponse(200);
+    // Confirm that we are logged-in after installation.
+    $this->assertText($this->rootUser->getUsername());
+
+    // Confirm that Drupal recognizes this distribution as the current profile.
+    $this->assertEqual(\Drupal::installProfile(), 'mydistro');
+    $this->assertNull(Settings::get('install_profile'), 'The install profile has not been written to settings.php.');
+  }
+
+}
diff --git a/core/modules/system/src/Tests/Installer/DistributionProfileTest.php b/core/modules/system/src/Tests/Installer/DistributionProfileTest.php
index 367510f..ca43d09 100644
--- a/core/modules/system/src/Tests/Installer/DistributionProfileTest.php
+++ b/core/modules/system/src/Tests/Installer/DistributionProfileTest.php
@@ -8,6 +8,7 @@
 namespace Drupal\system\Tests\Installer;
 
 use Drupal\Component\Serialization\Yaml;
+use Drupal\Core\Site\Settings;
 use Drupal\simpletest\InstallerTestBase;
 
 /**
@@ -73,6 +74,10 @@ public function testInstalled() {
     $this->assertResponse(200);
     // Confirm that we are logged-in after installation.
     $this->assertText($this->rootUser->getUsername());
+
+    // Confirm that Drupal recognizes this distribution as the current profile.
+    $this->assertEqual(\Drupal::installProfile(), 'mydistro');
+    $this->assertEqual(Settings::get('install_profile'), 'mydistro', 'The install profile has been written to settings.php.');
   }
 
 }
diff --git a/core/modules/system/src/Tests/Installer/InstallerExistingSettingsMismatchProfileBrokenTest.php b/core/modules/system/src/Tests/Installer/InstallerExistingSettingsMismatchProfileBrokenTest.php
new file mode 100644
index 0000000..4db9a75
--- /dev/null
+++ b/core/modules/system/src/Tests/Installer/InstallerExistingSettingsMismatchProfileBrokenTest.php
@@ -0,0 +1,133 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\system\Tests\Installer\InstallerExistingSettingsMismatchProfileBrokenTest.
+ */
+
+namespace Drupal\system\Tests\Installer;
+
+use Drupal\Core\Site\Settings;
+use Drupal\simpletest\InstallerTestBase;
+use Drupal\Core\Database\Database;
+
+/**
+ * Tests installer breaks with a profile mismatch and a read-only settings.php.
+ *
+ * @group Installer
+ */
+class InstallerExistingSettingsMismatchProfileBrokenTest extends InstallerTestBase {
+
+  /**
+   * The excepted exception message thrown during the installer.
+   * @var string;
+   */
+  protected $exceptionMessage;
+
+  /**
+   * {@inheritdoc}
+   *
+   * Configures a preexisting settings.php file without an install_profile
+   * setting before invoking the interactive installer.
+   */
+  protected function setUp() {
+    // Pre-configure hash salt.
+    // Any string is valid, so simply use the class name of this test.
+    $this->settings['settings']['hash_salt'] = (object) array(
+      'value' => __CLASS__,
+      'required' => TRUE,
+    );
+
+    // Pre-configure database credentials.
+    $connection_info = Database::getConnectionInfo();
+    unset($connection_info['default']['pdo']);
+    unset($connection_info['default']['init_commands']);
+
+    $this->settings['databases']['default'] = (object) array(
+      'value' => $connection_info,
+      'required' => TRUE,
+    );
+
+    // During interactive install we'll change this to a different profile and
+    // this test will ensure that the new value is written to settings.php.
+    $this->settings['settings']['install_profile'] = (object) array(
+      'value' => 'minimal',
+      'required' => TRUE,
+    );
+
+    // Pre-configure config directories.
+    $this->settings['config_directories'] = array(
+      CONFIG_ACTIVE_DIRECTORY => (object) array(
+        'value' => conf_path() . '/files/config_active',
+        'required' => TRUE,
+      ),
+      CONFIG_STAGING_DIRECTORY => (object) array(
+        'value' => conf_path() . '/files/config_staging',
+        'required' => TRUE,
+      ),
+    );
+    mkdir($this->settings['config_directories'][CONFIG_ACTIVE_DIRECTORY]->value, 0777, TRUE);
+    mkdir($this->settings['config_directories'][CONFIG_STAGING_DIRECTORY]->value, 0777, TRUE);
+
+    // @todo Remove HTML once https://www.drupal.org/node/2514044 is fixed.
+    $this->exceptionMessage = htmlspecialchars('Failed to modify <em class="placeholder">' . $this->siteDirectory . '/settings.php' . '</em>. Verify the file permissions.');
+    parent::setUp();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getInstallationUrl() {
+    // Make settings file not writable. This will break the installer.
+    $filename = $this->siteDirectory . '/settings.php';
+    // Make the settings file read-only.
+    // Not using File API; a potential error must trigger a PHP warning.
+    chmod($filename, 0444);
+    return $GLOBALS['base_url'] . '/core/install.php?langcode=en&profile=testing';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUpLanguage() {
+    // This step is skipped, because there is a lagcode as a query param.
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUpProfile() {
+    // This step is skipped, because there is a profile as a query param.
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUpSettings() {
+    // This step should not appear, since settings.php is fully configured
+    // already.
+  }
+
+  protected function setUpSite() {
+    // This step should not appear, since settings.php could not be written.
+  }
+
+  /**
+   * Verifies that installation did not succeed.
+   */
+  public function testBrokenInstaller() {
+    $this->assertText($this->exceptionMessage);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function error($message = '', $group = 'Other', array $caller = NULL) {
+    if ($group == 'Exception' && $message == $this->exceptionMessage) {
+      // Ignore the expected exception.
+      return FALSE;
+    }
+    return parent::error($message, $group, $caller);
+  }
+
+}
diff --git a/core/modules/system/src/Tests/Installer/InstallerExistingSettingsMismatchProfileTest.php b/core/modules/system/src/Tests/Installer/InstallerExistingSettingsMismatchProfileTest.php
new file mode 100644
index 0000000..37bb7c7
--- /dev/null
+++ b/core/modules/system/src/Tests/Installer/InstallerExistingSettingsMismatchProfileTest.php
@@ -0,0 +1,108 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\system\Tests\Installer\InstallerExistingSettingsMismatchProfileTest.
+ */
+
+namespace Drupal\system\Tests\Installer;
+
+use Drupal\Core\Site\Settings;
+use Drupal\simpletest\InstallerTestBase;
+use Drupal\Core\Database\Database;
+
+/**
+ * Tests the installer with an existing settings file but no install profile.
+ *
+ * @group Installer
+ */
+class InstallerExistingSettingsMismatchProfileTest extends InstallerTestBase {
+
+  /**
+   * {@inheritdoc}
+   *
+   * Configures a preexisting settings.php file without an install_profile
+   * setting before invoking the interactive installer.
+   */
+  protected function setUp() {
+    // Pre-configure hash salt.
+    // Any string is valid, so simply use the class name of this test.
+    $this->settings['settings']['hash_salt'] = (object) array(
+      'value' => __CLASS__,
+      'required' => TRUE,
+    );
+
+    // Pre-configure database credentials.
+    $connection_info = Database::getConnectionInfo();
+    unset($connection_info['default']['pdo']);
+    unset($connection_info['default']['init_commands']);
+
+    $this->settings['databases']['default'] = (object) array(
+      'value' => $connection_info,
+      'required' => TRUE,
+    );
+
+    // During interactive install we'll change this to a different profile and
+    // this test will ensure that the new value is written to settings.php.
+    $this->settings['settings']['install_profile'] = (object) array(
+      'value' => 'minimal',
+      'required' => TRUE,
+    );
+
+    // Pre-configure config directories.
+    $this->settings['config_directories'] = array(
+      CONFIG_ACTIVE_DIRECTORY => (object) array(
+        'value' => conf_path() . '/files/config_active',
+        'required' => TRUE,
+      ),
+      CONFIG_STAGING_DIRECTORY => (object) array(
+        'value' => conf_path() . '/files/config_staging',
+        'required' => TRUE,
+      ),
+    );
+    mkdir($this->settings['config_directories'][CONFIG_ACTIVE_DIRECTORY]->value, 0777, TRUE);
+    mkdir($this->settings['config_directories'][CONFIG_STAGING_DIRECTORY]->value, 0777, TRUE);
+
+    parent::setUp();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getInstallationUrl() {
+    return $GLOBALS['base_url'] . '/core/install.php?langcode=en&profile=testing';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUpLanguage() {
+    // This step is skipped, because there is a lagcode as a query param.
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUpProfile() {
+    // This step is skipped, because there is a profile as a query param.
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUpSettings() {
+    // This step should not appear, since settings.php is fully configured
+    // already.
+  }
+
+  /**
+   * Verifies that installation succeeded.
+   */
+  public function testInstaller() {
+    $this->assertUrl('user/1');
+    $this->assertResponse(200);
+    $this->assertEqual('testing', \Drupal::installProfile());
+    $this->assertEqual('testing', Settings::get('install_profile'), 'Profile was correctly changed to testing in Settings.php');
+  }
+
+}
diff --git a/core/modules/system/src/Tests/Installer/InstallerExistingSettingsNoProfileTest.php b/core/modules/system/src/Tests/Installer/InstallerExistingSettingsNoProfileTest.php
index 61dd5be..f7b41fe 100644
--- a/core/modules/system/src/Tests/Installer/InstallerExistingSettingsNoProfileTest.php
+++ b/core/modules/system/src/Tests/Installer/InstallerExistingSettingsNoProfileTest.php
@@ -7,7 +7,6 @@
 
 namespace Drupal\system\Tests\Installer;
 
-use Drupal\Core\Site\Settings;
 use Drupal\simpletest\InstallerTestBase;
 use Drupal\Core\Database\Database;
 
@@ -73,7 +72,7 @@ protected function setUpSettings() {
   public function testInstaller() {
     $this->assertUrl('user/1');
     $this->assertResponse(200);
-    $this->assertEqual('testing', Settings::get('install_profile'));
+    $this->assertEqual('testing', \Drupal::installProfile());
   }
 
 }
diff --git a/core/modules/system/src/Tests/Installer/InstallerExistingSettingsTest.php b/core/modules/system/src/Tests/Installer/InstallerExistingSettingsTest.php
index 08ae978..4c22a19 100644
--- a/core/modules/system/src/Tests/Installer/InstallerExistingSettingsTest.php
+++ b/core/modules/system/src/Tests/Installer/InstallerExistingSettingsTest.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\system\Tests\Installer;
 
+use Drupal\Core\Site\Settings;
 use Drupal\simpletest\InstallerTestBase;
 use Drupal\Core\Database\Database;
 use Drupal\Core\DrupalKernel;
@@ -85,6 +86,7 @@ public function testInstaller() {
     $this->assertUrl('user/1');
     $this->assertResponse(200);
     $this->assertEqual('testing', drupal_get_profile(), 'Profile was changed from minimal to testing during interactive install.');
+    $this->assertEqual('testing', Settings::get('install_profile'), 'Profile was correctly changed to testing in Settings.php');
   }
 
 }
diff --git a/sites/default/default.settings.php b/sites/default/default.settings.php
index 9ad5cae..99ec3a9 100644
--- a/sites/default/default.settings.php
+++ b/sites/default/default.settings.php
@@ -258,12 +258,20 @@
 /**
  * The active installation profile.
  *
+ * This setting should not be accessed directly using the Settings object. Use
+ * \Drupal::installProfile() or inject the install_profile container parameter
+ * instead.
+ *
  * Changing this after installation is not recommended as it changes which
  * directories are scanned during extension discovery. If this is set prior to
  * installation this value will be rewritten according to the profile selected
- * by the user.
+ * by the user. If the installation is using a distribution then this does not
+ * need to be set.
  *
  * @see install_select_profile()
+ * @see \Drupal::installProfile()
+ * @see \Drupal\Core\DrupalKernel::getInstallProfile()
+ * @see \Drupal\Core\DrupalKernel::getDistribution()
  */
 # $settings['install_profile'] = '';
 
