[alias]

  # View abbreviated SHA, description, and history graph of the latest 20 commits.
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format.
  s = status -s

  # Show the diff between the latest commit and the current state.
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules.
  p = pull --recurse-submodules

  # Clone a repository including all submodules.
  c = clone --recursive

  # Commit all changes.
  ca = !git add -A && git commit -av

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v
  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  st = status
  co = checkout
  sw = switch
  ci = commit
  br = branch
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci)%C(bold blue)<%an>%Creset' --abbrev-commit

  #
  # Branch workflow
  #
  # Switch to production branch.
  sp = !(([[ -n "$(git rev-parse --verify --quiet main)" ]] && git switch main) \
      || ([[ -n "$(git rev-parse --verify --quiet master)" ]] && git switch master))

  # Create a topic branch from an up-to-date main/master branch.
  # Based on https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow
  tb = "!f() { \
    git sp \
    && git pull \
    && git switch -c $1; \
    }; f"

  # Merge branch into main/master branch and switch back.
  mm = !export BRANCH=$(git branch --show-current) \
    && git fetch --all \
    && git push \
    && echo "üöÄ Merging $BRANCH into the production branch" \
    && git sp \
    && git pull \
    && git merge --no-edit --no-ff - \
    && git push \
    && git switch -

  # Merge develop branch into main/master branch and switch back.
  md = !git switch develop\
    && git pull \
    && git mm \
    && echo "üöÄ Merging the production branch back into the develop branch" \
    && git merge - \
    && git push

  # Merge branch into main/master and develop branches.
  mb = !git mm \
    && echo "üßë‚Äçüç≥ Merging $BRANCH into the develop branch" \
    && git switch develop \
    && git pull \
    && git merge --no-edit --no-ff - \
    && git push

  # Delete topic branch local and remote.
  db = "!f() { \
    echo "üî• Deleting local and remote topic branch: $1" \
    && git branch -d $1; \
    git push origin --delete $1; \
    }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch --all
  remotes = remote --verbose

  # List aliases.
  aliases = config --get-regexp alias

  # Amend the currently staged files to the latest commit.
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit.
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits.
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  #fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with main.
  # a.k.a. ‚Äòdelete merged‚Äô
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits.
  contributors = shortlog --summary --numbered

  # Show the user email for the current repository.
  whoami = config user.email

[apply]

  # Detect whitespace errors when applying a patch.
  whitespace = fix

[branch]

  # Show most recently changed branches first.
  sort = -committerdate

[core]

  # Use custom `.gitignore` and `.gitattributes`.
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error.
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS.
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

   # Always use Unix line endings in checked out files
  autocrlf = input
  safecrlf = false

  ignorecase = false
  filemode = false

[help]
  # Automatically correct typos after 3 seconds (30 deciseconds)
  autocorrect = 30

[fetch]
  prune = true

[pull]
  rebase = true

[push]
  default = simple

[remote "origin"]
  push = HEAD

[http]
  sslVerify = false

[init]
  # Set the default branch name.
  defaultBranch = main

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[difftool]
  prompt = false

# Kaleidoscope.app as difftool and mergetool.
[difftool "Kaleidoscope"]
  cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"

[diff]
  tool = Kaleidoscope
  # Detect copies as well as renames.
  renames = copies

[diff "bin"]
  # Use `hexdump` to diff binary files.
  textconv = hexdump -v -C

[mergetool "Kaleidoscope"]
  cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
  trustExitCode = true
[mergetool]
  prompt = false
  keepBackup = false
[merge]
  tool = Kaleidoscope
